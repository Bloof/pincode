[{"F:\\pincode\\src\\index.tsx":"1","F:\\pincode\\src\\serviceWorker.ts":"2","F:\\pincode\\src\\store.ts":"3","F:\\pincode\\src\\App.tsx":"4","F:\\pincode\\src\\rootSaga.ts":"5","F:\\pincode\\src\\reducers\\pincodeReducer.ts":"6","F:\\pincode\\src\\actions\\actions.ts":"7","F:\\pincode\\src\\sagas\\pincodePage.ts":"8","F:\\pincode\\src\\api\\checkPincode.ts":"9"},{"size":389,"mtime":1611767129760,"results":"10","hashOfConfig":"11"},{"size":5424,"mtime":1611767129763,"results":"12","hashOfConfig":"11"},{"size":468,"mtime":1611767129764,"results":"13","hashOfConfig":"11"},{"size":1887,"mtime":1611770105390,"results":"14","hashOfConfig":"11"},{"size":204,"mtime":1611767129762,"results":"15","hashOfConfig":"11"},{"size":556,"mtime":1611767129762,"results":"16","hashOfConfig":"11"},{"size":563,"mtime":1611767129759,"results":"17","hashOfConfig":"11"},{"size":725,"mtime":1611767129763,"results":"18","hashOfConfig":"11"},{"size":230,"mtime":1611767129760,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1bkyfqb",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"F:\\pincode\\src\\index.tsx",[],["44","45"],"F:\\pincode\\src\\serviceWorker.ts",[],"F:\\pincode\\src\\store.ts",["46"],"import { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { pincodeReducer } from \"./reducers/pincodeReducer\";\r\nimport { rootSaga } from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport function configureStore() {\r\n  return createStore(\r\n      pincodeReducer,\r\n      applyMiddleware(sagaMiddleware)\r\n  );\r\n}\r\nexport const store = configureStore();\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","F:\\pincode\\src\\App.tsx",["47"],"import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { appActions } from \"./actions/actions\";\r\nimport { AppState } from \"./types/general\";\r\nimport { AiFillLock, AiFillUnlock } from 'react-icons/ai';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const [pincode, setPincode] = useState(\"\");\r\n  const { isOpen } = useSelector(\r\n    (state: AppState) => {\r\n      return state;\r\n    }\r\n  );\r\n\r\n  console.log(\"open: \" + isOpen);\r\n\r\n  const createPincode = (number: string) => {\r\n    if((pincode + number).length <= 4)\r\n      setPincode(pincode + number)\r\n  }\r\n\r\n  const handleDispatch = () => {\r\n    dispatch(appActions.pincodeCheckTrigger({ pincode }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {pincode}\r\n      <div>\r\n        <button onClick={() => createPincode(\"1\")}>1</button>\r\n        <button onClick={() => createPincode(\"2\")}>2</button>\r\n        <button onClick={() => createPincode(\"3\")}>3</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => createPincode(\"4\")}>4</button>\r\n        <button onClick={() => createPincode(\"5\")}>5</button>\r\n        <button onClick={() => createPincode(\"6\")}>6</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => createPincode(\"7\")}>7</button>\r\n        <button onClick={() => createPincode(\"8\")}>8</button>\r\n        <button onClick={() => createPincode(\"9\")}>9</button>\r\n      </div>\r\n      <div>\r\n      <button onClick={() => setPincode(\"\")}>Clear</button>\r\n\r\n        <button onClick={() => createPincode(\"0\")}>0</button>\r\n        <button onClick={() => {\r\n          dispatch(\r\n            appActions.pincodeCheckTrigger({\r\n              pincode\r\n            }))\r\n        }}>OK</button>\r\n      </div>\r\n\r\n      <div>{isOpen === true ? <AiFillUnlock size=\"100\" /> : <AiFillLock size=\"100\" />}</div>\r\n    </div>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n","F:\\pincode\\src\\rootSaga.ts",[],"F:\\pincode\\src\\reducers\\pincodeReducer.ts",["48"],"import { createReducer, action } from \"typesafe-actions\";\r\nimport { produce } from \"immer\";\r\nimport { PinReducerState } from \"../types/general\"\r\nimport { appActions, AppAction } from \"../actions/actions\";\r\n\r\nconst initialState: PinReducerState = {\r\n    isOpen: false\r\n}\r\n\r\nexport const pincodeReducer = createReducer<PinReducerState, AppAction>(initialState)\r\n    .handleAction(appActions.pincodeCheckSuccess, (state, action) => {\r\n        return produce(state, (draftState) => {\r\n                draftState.isOpen = action.payload;\r\n        });\r\n    });\r\n","F:\\pincode\\src\\actions\\actions.ts",[],"F:\\pincode\\src\\sagas\\pincodePage.ts",["49","50","51"],"import { takeEvery, take, put, call, select } from \"redux-saga/effects\";\r\nimport { ActionType, Action } from \"typesafe-actions\";\r\nimport { AppActionConstants, appActions } from \"../actions/actions\";\r\nimport { checkPincode } from \"../api/checkPincode\";\r\n\r\nexport function* watchPincodeTrigger() {\r\n    yield takeEvery(AppActionConstants.PINCODE_CHECK_TRIGGER, handleCheckPincode);\r\n}\r\n\r\nexport function* handleCheckPincode(action: ActionType<typeof appActions.pincodeCheckTrigger>) {\r\n    try {\r\n        const response: boolean = yield call(checkPincode, action.payload);        \r\n        yield put(appActions.pincodeCheckSuccess(response));\r\n    } catch (error) {\r\n        console.log(\"Call to api failed\" + error);\r\n    }\r\n}","F:\\pincode\\src\\api\\checkPincode.ts",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":23,"nodeType":"60","messageId":"61","endLine":1,"endColumn":30},{"ruleId":"58","severity":1,"message":"62","line":24,"column":9,"nodeType":"60","messageId":"61","endLine":24,"endColumn":23},{"ruleId":"58","severity":1,"message":"63","line":1,"column":25,"nodeType":"60","messageId":"61","endLine":1,"endColumn":31},{"ruleId":"58","severity":1,"message":"64","line":1,"column":21,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"65","line":1,"column":38,"nodeType":"60","messageId":"61","endLine":1,"endColumn":44},{"ruleId":"58","severity":1,"message":"66","line":2,"column":22,"nodeType":"60","messageId":"61","endLine":2,"endColumn":28},{"ruleId":"54","replacedBy":"67"},{"ruleId":"56","replacedBy":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","'handleDispatch' is assigned a value but never used.","'action' is defined but never used.","'take' is defined but never used.","'select' is defined but never used.","'Action' is defined but never used.",["69"],["70"],"no-global-assign","no-unsafe-negation"]